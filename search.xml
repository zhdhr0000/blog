<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[知识梳理-MVP]]></title>
      <url>http://zhdhr0000.github.io/blog/2017/03/01/2/</url>
      <content type="html"><![CDATA[<h2 id="MVC及MVC架构在移动端存在的两个问题"><a href="#MVC及MVC架构在移动端存在的两个问题" class="headerlink" title="MVC及MVC架构在移动端存在的两个问题"></a>MVC及MVC架构在移动端存在的两个问题</h2><p>MVC就是传统的Model,View,Controller结构,据说曾在PC Web时代大放光彩,是一个很经典的应用架构,不再详细介绍啦.</p>
<h3 id="1-View-Controller过重"><a href="#1-View-Controller过重" class="headerlink" title="1.View/Controller过重"></a>1.View/Controller过重</h3><p>但是在Android开发里,Model基本对应了应用的HttpService,Database,POJO等,但V和C的职能划分就出现了差距,View层的代表XML布局在Android里面太轻量,只定义了最基础的展示,而View的交互变化和原本Controller的职责合并在了一起,被放到了Activity/Fragment里面,于是就形成了一个View层和Model层比较弱,大量的代码都被放到了Controller层(当然也可以认为是View层很厚,Model和Controller层很薄)的情况.View和Controller的界限不明确.</p>
<p>据了解,iOS也出现了类似的问题,Model层都差不多,StoryBoard/NIB/XIB文件代表了View层,其他大量的逻辑都被放入到了ViewController里面,并且据说还有人在继续用代码布局,那ViewController里面的东西就更多了,同样出现了View和Controller界限不明的问题.</p>
<p>MVC本身的结构也不适合高速发展变化的移动端,由于实际代码编写中View直接向Model询问状态,通过Model层响应更新等等,其实是将View和Model进行耦合了,并且View和Controller的界限越来越模糊,不利于后续的复用和业务修改调整,而且MVC在移动端已经变成了Massive View Controller(出自对iOS的ViewController过重的吐槽)╮(╯_╰)╭,而过重的Controller又会导致代码维护和修改的难度进一步增加,架构优化势在必行.</p>
<h3 id="2-复用与修改困难"><a href="#2-复用与修改困难" class="headerlink" title="2.复用与修改困难"></a>2.复用与修改困难</h3><p>由于MVC三个部分之间相互都可以沟通,实质上将M-V-C三部分耦合在了一起,很难单独的将某一部分进行复用,同时修改其中一个部分的时候需要注意另外两个部分是不是也需要同步进行修改,这无疑就给修改代码提高了难度.</p>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>MVP架构是使用了Presenter层代替了原本的Controller层,View只和Presenter通信,Model也只和Presenter通信,双方通过协议进行沟通和交流,协议一般是讲业务拆分成视图部分和数据部分,数据部分交给Presenter通知Model层,而数据改变后,Model不允许直接通知视图,而是通知Presenter由Presenter通知绑定的视图,通过这种方式实现了解耦,个人认为,MVP的精髓是Java设计模式中的代理模式,将具体业务抽象为接口,各种业务操作都面向接口编程.最大限度的避免实际的类与类之间的耦合.</p>
<p>MVP在Android中,由于XML体系能做的事情有限,所以往往将Activity/Fragment作为View层,Model层还是原本MVC中的Model层,而双方根据业务的需求,抽象定义出一个中间人Presenter的双向协议,一个方面是Presenter对视图所提供的业务接口,一个方面是Presenter对数据进行操作控制的业务行为接口,通过双向的协议定义出对应的Presenter类</p>
<h2 id="MVC与MVP的异同"><a href="#MVC与MVP的异同" class="headerlink" title="MVC与MVP的异同"></a>MVC与MVP的异同</h2><p>MVC和MVP有不少相似的地方,又有一定的差异,以下是我个人的理解.</p>
<p>MVC/P:</p>
<ul>
<li>Model : 数据及相关操作</li>
<li>View : 视图展示和响应</li>
<li>Controller/Presenter : 处理业务的控制器</li>
</ul>
<p>首先是相同点MVC和MVP的结构其实都是将程序分成了这三部分,数据作为单独的一层,面向用户的视图作为单独的一层,其余作为一个处理各种事件,业务等行为的控制器,其实可以明显的看出MVC和MVP的思想是一脉相承的,MVP可以说是对于MVC思想的一个改进版架构.</p>
<p>而MVC和MVP最大的,也是最核心的一个区别是对不同组成部分之间,它们的沟通交流进行了解耦,无论具体细节是如何实现的,这一思想是最核心的,不会发生改变,Model和View之间禁止直接发生通信,层与层之间的交流依托于一个中间人Presenter,与此同时，Presenter决定了具体的视图变化如何影响数据,数据的改变会如何向视图反馈</p>
<p>整体的业务流程变得异常清晰,当遇到了Bug/业务改变/视图修改发生了改变的时候,可以对现有功能做出最小的影响来完成Bugfix/业务改变/视图修改,MVP非常直截了当的解决了MVC中遇到的两个主要问题</p>
<h3 id="1-Model和View都只允许与Presenter层交互"><a href="#1-Model和View都只允许与Presenter层交互" class="headerlink" title="1.Model和View都只允许与Presenter层交互"></a>1.Model和View都只允许与Presenter层交互</h3><p>Model和View的具体操作Presenter不再负责处理,Model和View分流了MVC中Controller的作用,代码相对更均衡的分布在三方(当然业务复杂之后Presenter代码量依然会变多,但比MVC结构的代码分布更合理)</p>
<h3 id="2-复用与修改"><a href="#2-复用与修改" class="headerlink" title="2.复用与修改"></a>2.复用与修改</h3><p>由于Model和View都只与Presenter通信,数据修改,视图修改业务修改依赖于协议,除非协议本身发生了修改,在单独一方需要修改的时候(如View),只需要修改对应的View层实现即可,不需要修改Presenter和Model层,典型场景是业务逻辑和数据都不变的情况下,界面展示进行了大幅的优化改版,MVC除了需要改View层相关,还需要在Controller和Model的代码中找到与View相关的代码进行修改,而MVP直接仅修改View层实现代码,协议未发生修改的情况下不需要修改Presenter和Model.</p>
<h2 id="Android-MVP"><a href="#Android-MVP" class="headerlink" title="Android MVP"></a>Android MVP</h2><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><p>一般至少会包含HttpService和POJO,还会含有Database,SharedPreference,ImageCache等等相关部分,大体和原本MVC的结构相似或相同.</p>
<h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><p>由于Android的XML只是布局描述,并非编程代码并不能承担起View层的作用,View层由Activity和Fragment来承担,一般在setContentView之后就创建出对应的Presenter,调用Presenter中的对接视图的方法,将自己传给Presenter,视图逻辑牵扯到数据变动时通知Presenter对应协议方法.本身也会实现对应的视图协议方法来响应Presenter的对视图的控制</p>
<h3 id="Presenter"><a href="#Presenter" class="headerlink" title="Presenter"></a>Presenter</h3><p>由于Actvitiy/Fragment已经作为View层,Presenter由Java类来实现,Presenter会持有约定的View层协议对象,Presenter主要控制了与Model层相关的逻辑如何反馈给View层,Presenter具体实现了与Model通信的逻辑,并在合适的地方调用持有的View对应的协议方法,让View响应变化.</p>
<h3 id="协议层"><a href="#协议层" class="headerlink" title="协议层"></a>协议层</h3><p>协议会有2或3层,由于App作为客户端的特点,可能会出现一些不需要Model层的情况,一般是3层</p>
<ol>
<li>View层协议,约定了View层的所提供的事件,比如基本的页面逻辑处理,业务控制或数据改变导致的视图变化等.</li>
<li>Presenter层协议,约定了一些纯粹的业务逻辑的处理,比如发送验证码,用户登录,用户触发了页面刷新等.</li>
<li>Model层协议,约定了Model层具体提供的数据值和格式,比如登录返回的用户信息,查询某个商品的数据等.</li>
</ol>
<p>如图所示:</p>
<div align="center"><br><img src="/blog/2017/03/01/2/mvp.png" alt="mvp关系图-画图手绘"><br></div>

<p>MVP三层之间不依赖实例沟通,通过抽象的协议进行,以此对具体实现进行了解耦,只要协议不发生变化,修改具体实现时就只会修改内部实现,代理思想的精髓.</p>
<p>这是一个 <a href="https://github.com/zhdhr0000/Architecture" target="_blank" rel="external">栗子</a>,基于MVP架构.</p>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM?"></a>MVVM?</h2><p>MVVM其实是通过观察者模式对m-v协议和v-p协议进行了改造,进行了数据改变时自动通知视图,视图被用户操作时自动通知数据的双向绑定.分层架构和程序结构并没有本质上的变化.是一种MVP架构在函数式编程思想下的方案.</p>
<p><em>转载请注明出处</em></p>
<p>_特别感谢 <a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="external">阮一峰的这篇文章</a>以及<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">googlesamples/android-architecture</a>_</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 7.0 PopupWindow的一个展示Bug]]></title>
      <url>http://zhdhr0000.github.io/blog/2017/02/20/1/</url>
      <content type="html"><![CDATA[<h2 id="起因与Bug详情"><a href="#起因与Bug详情" class="headerlink" title="起因与Bug详情"></a>起因与Bug详情</h2><p>前段时间有反馈过来说,在Android7.0中,PopupWindow的展示位置出了问题(最开始以为没弹出来,后来发现是位置错了),通过查<del>谷</del>看<del>歌</del>源<del>搜</del>码<del>索</del>到了可能的情况和一些文章.</p>
<p>但找到的文章对于问题的表述不太完整,还有一些文章根本就是搞错了原因(大量文章说位置错误是由于PopupWindow的宽高设置的太大了…醉了),后来结合源码和实际的Bug情况看到了具体的详细原因.</p>
<p>这个Bug的具体情况是:在使用PopupWindow调用<code>showAtLocation</code>方法<code>showAsDropDown</code>方法和<code>update</code>方法时,如果传入的Gravity参数不为<code>Gravity.START|Gravity.TOP</code>则Gravity会被设置为<code>Gravity.START|Gravity.TOP</code>,PopupWindow的位置即发生了改变,可以通过反射来改掉这个Bug,下面是这个Bug的详细解法</p>
<h2 id="Bug原因"><a href="#Bug原因" class="headerlink" title="Bug原因"></a>Bug原因</h2><p>具体问题发生在<code>computeGravity</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private int computeGravity() &#123;</div><div class="line">    int gravity = Gravity.START | Gravity.TOP;</div><div class="line">    if (mClipToScreen || mClippingEnabled) &#123;</div><div class="line">        gravity |= Gravity.DISPLAY_CLIP_VERTICAL;</div><div class="line">    &#125;</div><div class="line">    return gravity;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到返回的gravity值,在方法的一开始就被强制设置为了<code>Gravity.START|Gravity.TOP</code>,所以我们传入的参数并没有起到任何作用,而这个Bug只有API版本24,Android 7.0的SDK是这样,无责任猜想可能是Android系统开发的某位大哥,在写分屏相关的UI代码的时候,出于测试方便或者什么的,直接将这里写死了<code>╮(╯_╰)╭</code><br>不过我们可以通过反射来改成正确的代码.</p>
<div align="center"><br><img src="/blog/2017/02/20/1/goutou.jpg" alt="一个耿直的微笑"><br></div>

<h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>首先查看一下都哪里用到了这个<code>computeGravity</code>,然后通过搜索看到,分别是1418行的<code>createPopupLayoutParams</code>方法里出现了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p.gravity = computeGravity();</div></pre></td></tr></table></figure></p>
<p>以及在1096行和2081行的两个<code>update</code>方法内部出现了同样的一行代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">final int newGravity = computeGravity();</div></pre></td></tr></table></figure></p>
<p>由于<del>懒</del>在实际使用中并没有通过<code>update</code>来更新PopupWindow的位置,并且也只是用了<code>showAtLocation</code>,所以暂没有对<code>update</code>和<code>showAsDropDown</code>进行反射来重写方法,只重写了<code>showAtLocation</code>,理论上讲,<code>createPopupLayoutParams</code>同时被<code>showAtLocation</code>和<code>showAsDropDown</code>方法用到了,且这是一个私有方法,所以需要分别重写<code>showAtLocation</code>和<code>showAsDropDown</code>方法以及两个<code>update</code>方法</p>
<p>这里提供出一个修改方案,import和package已去掉,如果要使用请自行添加,这里特别说明一下<code>TransitionManager.endTransitions(mDecorView);</code>,这行代码在IDE中很可能会报错标红,原因是使用了高版本API (Android M SDK 23)而没有进行版本判断,但实际上可以不用理会,因为目前这个Bug只有7.0这一个版本出现了,所以我在方法的最开始进行了当前Android版本的判断,如果不是版本号24的7.0版本,直接执行super.showAtLocation调用原PopupWindow的方法,之后return掉了这个方法,毕竟反射也是会带来额外一丢丢的性能和内存占用.如果不想让他报红可以选择改成if else的形式.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">public class NougatPopupWindow extends PopupWindow &#123;</div><div class="line"></div><div class="line">    public NougatPopupWindow(View contentView, int width, int height, boolean focusable) &#123;</div><div class="line">        super(contentView, width, height, focusable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void showAtLocation(View parent, int gravity, int x, int y) &#123;</div><div class="line">        if (Build.VERSION.SDK_INT != 24) &#123;</div><div class="line">            super.showAtLocation(parent, gravity, x, y);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        Object obj = getParam(&quot;mContentView&quot;);</div><div class="line">        View mContentView = (View) obj;</div><div class="line">        if (isShowing() || mContentView == null) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        obj = getParam(&quot;mDecorView&quot;);</div><div class="line">        ViewGroup mDecorView = (ViewGroup) obj;</div><div class="line">        //RequireAPI M but if SDK_INT != N,super.showAtLocation and returned;</div><div class="line">        TransitionManager.endTransitions(mDecorView);</div><div class="line"></div><div class="line">        execMethod(&quot;detachFromAnchor&quot;, new Class[]&#123;&#125;, new Object[]&#123;&#125;);</div><div class="line"></div><div class="line">        setParam(&quot;mIsShowing&quot;, true);</div><div class="line">        setParam(&quot;mIsDropdown&quot;, false);</div><div class="line"></div><div class="line">        obj = execMethod(&quot;createPopupLayoutParams&quot;, new Class[]&#123;IBinder.class&#125;, new Object[]&#123;parent.getWindowToken()&#125;);</div><div class="line">        final WindowManager.LayoutParams p = (WindowManager.LayoutParams) obj;</div><div class="line">        p.gravity = computeGravity(gravity);</div><div class="line"></div><div class="line">        execMethod(&quot;preparePopup&quot;,new Class[]&#123;WindowManager.LayoutParams.class&#125;,new Object[]&#123;p&#125;);</div><div class="line"></div><div class="line">        if (gravity != Gravity.NO_GRAVITY) &#123;</div><div class="line">            p.gravity = gravity;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        p.x = x;</div><div class="line">        p.y = y;</div><div class="line"></div><div class="line">        execMethod(&quot;invokePopup&quot;,new Class[]&#123;WindowManager.LayoutParams.class&#125;,new Object[]&#123;p&#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Object getParam(String paramName) &#123;</div><div class="line">        if (TextUtils.isEmpty(paramName)) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            Field field = PopupWindow.class.getDeclaredField(paramName);</div><div class="line">            field.setAccessible(true);</div><div class="line">            return field.get(this);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void setParam(String paramName, Object obj) &#123;</div><div class="line">        if (TextUtils.isEmpty(paramName)) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            Field field = PopupWindow.class.getDeclaredField(paramName);</div><div class="line">            field.setAccessible(true);</div><div class="line">            field.set(this, obj);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Object execMethod(String methodName, Class[] cls, Object[] args) &#123;</div><div class="line">        if (TextUtils.isEmpty(methodName)) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            Method method = getMethod(PopupWindow.class, methodName, cls);</div><div class="line">            method.setAccessible(true);</div><div class="line">            return method.invoke(this, args);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Method getMethod(Class clazz, String methodName,</div><div class="line">                             final Class[] classes) throws NoSuchMethodException &#123;</div><div class="line">        Method method = null;</div><div class="line">        try &#123;</div><div class="line">            method = clazz.getDeclaredMethod(methodName, classes);</div><div class="line">        &#125; catch (NoSuchMethodException e) &#123;</div><div class="line">            try &#123;</div><div class="line">                method = clazz.getMethod(methodName, classes);</div><div class="line">            &#125; catch (NoSuchMethodException ex) &#123;</div><div class="line">                if (clazz.getSuperclass() == null) &#123;</div><div class="line">                    return method;</div><div class="line">                &#125; else &#123;</div><div class="line">                    method = getMethod(clazz.getSuperclass(), methodName,</div><div class="line">                            classes);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return method;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    private int computeGravity(int mGravity) &#123;</div><div class="line">        setParam(&quot;mGravity&quot;, mGravity);</div><div class="line">        int gravity = mGravity == Gravity.NO_GRAVITY ? Gravity.START | Gravity.TOP : mGravity;</div><div class="line"></div><div class="line">        Object obj = getParam(&quot;mIsDropdown&quot;);</div><div class="line">        boolean mIsDropdown = (boolean) obj;</div><div class="line">        obj = getParam(&quot;mClipToScreen&quot;);</div><div class="line">        boolean mClipToScreen = (boolean) obj;</div><div class="line">        obj = getParam(&quot;mClippingEnabled&quot;);</div><div class="line">        boolean mClippingEnabled = (boolean) obj;</div><div class="line">        if (mIsDropdown &amp;&amp; (mClipToScreen || mClippingEnabled)) &#123;</div><div class="line">            gravity |= Gravity.DISPLAY_CLIP_VERTICAL;</div><div class="line">        &#125;</div><div class="line">        return gravity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>转载请注明出处</em></p>
<p><em>文中部分内容参考了作者Kinva的文章,链接:<a href="http://www.jianshu.com/p/0df10893bf5b" target="_blank" rel="external">http://www.jianshu.com/p/0df10893bf5b</a></em></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://zhdhr0000.github.io/blog/2017/02/03/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.这是Hexo的<hello world="">文,并不打算删掉.</hello></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
